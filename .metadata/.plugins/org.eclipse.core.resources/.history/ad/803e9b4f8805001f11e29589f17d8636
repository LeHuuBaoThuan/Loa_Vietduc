/*
 * handler.c
 *
 *  Created on: Apr 28, 2024
 *      Author: BaoThuan
 */
#include <handler.h>

uint16_t value_MIC=0;
uint16_t thre_MIC=333;

ADC_HandleTypeDef* hadc1_fnc;
TIM_HandleTypeDef* htim2_fnc;

//typedef enum
//{
//	MODE_1,// music
//	MODE_2,// time base
//}MODE_STATUS;
//
//MODE_STATUS = mode_status

void init_handler(ADC_HandleTypeDef* hadc, TIM_HandleTypeDef* htim)
{
	htim2_fnc = htim;
	hadc1_fnc = hadc;
}

/**
  * @brief
  * @param
  * @retval
  */
void ON_ALL()
{
	GPIOB->ODR &= ~(GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9);// reset
}


/**
  * @brief
  * @param
  * @retval
  */
void OFF_ALL()
{
	GPIOB->ODR |= (GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9);// set
}

/**
  * @brief
  * @param
  * @retval
  */
void MODE_1()
{
//	L7D_74HC595_Set_Reset(L7_Anode[1]);

	HAL_TIM_Base_Stop_IT(htim2_fnc);

	HAL_ADC_Start(hadc1_fnc);
	HAL_ADC_PollForConversion(hadc1_fnc,1000);
	value_MIC = HAL_ADC_GetValue(hadc1_fnc);

	HAL_ADC_Stop(hadc1_fnc);

	if (value_MIC > thre_MIC)
	{
		ON_ALL();
	}
	else
	{
		OFF_ALL();
	}
}


/**
  * @brief
  * @param
  * @retval
  */
void MODE_2()
{
//	L7D_74HC595_Set_Reset(L7_Anode[2]);
	HAL_TIM_Base_Start_IT(htim2_fnc);
}


/**
  * @brief
  * @param
  * @retval
  */
void Handler_Led()
{
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
	{
		MODE_1();
	}
	else
	{
		MODE_2();
	}
}
